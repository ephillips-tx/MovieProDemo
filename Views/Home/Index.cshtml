@using MovieProDemo.ViewModels
@using MovieProDemo.Services.Interfaces
@using MovieProDemo.Models.TMDB
@inject IImageService _imageService

@model LandingPageVM

@{
    ViewData["Title"] = "MoviePro";
    var colStyle = string.Empty;
    var count = 0;
    var cstmCollId = string.Empty;
    var tmdbCollId = string.Empty;
    var carouStyle = "carousel";
    
    List<MovieSearchResult[]> tmdbMovieCollections = new List<MovieSearchResult[]>() { Model.NowPlaying.results, Model.Popular.results, Model.TopRated.results, Model.Upcoming.results };
                                    
}

<div class="row">
    <div class="col-12">
        <h4 class="mb-3">CUSTOM COLLECTIONS</h4>
        <div class="row mb-4">
            <div class="col-12">
                <div class="collections" id="cstmCollections">
                    @foreach (var collection in Model.CustomCollections)
                    {
                        cstmCollId = "cstmColl" + count;
                        colStyle = (collection.Name == "All") ? "active" : "inactive";
                        <button class="@colStyle" id="@cstmCollId">#@collection.Name</button>
                        count++;
                    }
                    @{ count = 0; }
                    <div class="text-end mb-1" id="cstmIndicatorSect"></div>
                    <div class="carousel-container" id="cstmCarousel">
                        @foreach (var collection in Model.CustomCollections)
                        {
                            @if (count > 0)
                            {
                                carouStyle = "carousel hide";
                            }
                            <div class="@carouStyle">
                                <button class="carousel-control ctrl-prev"><span class="material-symbols-outlined">arrow_left</span></button>
                                <button class="carousel-control ctrl-next"><span class="material-symbols-outlined">arrow_right</span></button>
                                <div class="carousel-track d-flex flex-nowrap">
                                    @foreach(var movie in collection.MovieCollections)
                                    {
                                        // cutoff length for overview is 175
                                        int overviewLength = movie.Movie.Overview.Length;
                                        int cap = (overviewLength < 175) ? overviewLength : 175;
                                        string overview = movie.Movie.Overview.Substring(0,cap);
                                        if (overviewLength > 175)
                                        {
                                            overview += "...";
                                        }

                                        <a asp-action="Details" asp-controller="Movies" asp-route-id="@movie.Movie.MovieId" class="overlay">
                                            <div class="card clean">
                                                <div class="fixOverlay" data-overview="@overview">
                                                    <img src="@_imageService.DecodeImage(movie.Movie.Poster, movie.Movie.PosterType)" class="card-img-top img-fluid" alt="Movie Poster">
                                                    <span class="centered">More Info</span>
                                                </div>
                                                <div class="card-body">
                                                    <h5 class="card-title clampTitle">
                                                        @movie.Movie.Title
                                                    </h5>
                                                    <h5>
                                                        <span class="material-symbols-outlined text-warning">star</span><large>@movie.Movie.VoteAverage</large><small>/10</small> 
                                                    </h5>
                                                    @*<p class="card-text clampOverview">@movie.Movie.Overview</p>*@
                                                    @*<a asp-action="Details" asp-controller="Movies" asp-route-id="@movie.Movie.MovieId" class="">More Info</a>*@
                                                </div>
                                            </div>
                                        </a>
                                    }
                                </div>
                            </div>
                            count++; 
                        }
                     </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12">
        <h4 class="mb-3">TMDB COLLECTIONS</h4>
        <div class="row mb-4">
            <div class="col-12">
                <div class="collections" id="tmdbCollections">
                    @{
                        string[] tmdbCollections = new string[] { "NOW PLAYING", "POPULAR", "TOP RATED", "UPCOMING" };
                        count = 0;
                        carouStyle = "carousel";
                    }
                    @foreach (var collection in tmdbCollections)
                    {
                        tmdbCollId = "tmdbColl" + count;
                        colStyle = (tmdbCollections[count] == tmdbCollections[0]) ? "active" : "inactive";
                        <button class="@colStyle" id="@tmdbCollId">#@tmdbCollections[count]</button>
                        count++;
                    }
                    @{ int index = 0; }
                    <div class="text-end mb-1" id="tmdbIndicatorSect"></div>
                    <div class="carousel-container" id="tmdbCarousel">
                        @foreach (var collection in tmdbMovieCollections)
                        {
                            @if (index > 0)
                            {
                                carouStyle = "carousel hide";
                            }
                            <div class="@carouStyle">
                                <button class="carousel-control ctrl-prev"><span class="material-symbols-outlined">arrow_left</span></button>
                                <button class="carousel-control ctrl-next"><span class="material-symbols-outlined">arrow_right</span></button>
                                <div class="carousel-track d-flex flex-nowrap">
                                    @{
                                        int movieCount = ViewBag.MovieCount;
                                        var tmdbMovie = tmdbMovieCollections[index];
                                    }
                                    @foreach(var movie in tmdbMovie)
                                    {
                                        // cutoff length for overview is 175
                                        int overviewLength = movie.overview.Length;
                                        int cap = (overviewLength < 175) ? overviewLength : 175;
                                        string overview = movie.overview.Substring(0,cap);
                                        if (overviewLength > 175)
                                        {
                                            overview += "...";
                                        }

                                        <a asp-action="Details" asp-controller="Movies" asp-route-id="@movie.id" class="overlay">
                                            <div class="card clean">
                                                <div class="fixOverlay" data-overview="@overview">
                                                    <img src="@movie.poster_path" class="card-img-top img-fluid" alt="Movie Poster">
                                                    <span class="centered">More Info</span>
                                                </div>
                                                <div class="card-body">
                                                    <h5 class="card-title clampTitle">@movie.title</h5>
                                                    <h5>
                                                        <span class="material-symbols-outlined text-warning">star</span><large>@movie.vote_average</large><small>/10</small> 
                                                    </h5>
                                                    @*<p class="card-text clampOverview">@movie.overview</p>*@
                                                </div>
                                            </div>
                                        </a>
                                    }
                                </div>
                            </div>
                            index++; 
                        }
                     </div>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
<script>
    // groupSize is basically how many movie posters to fully display. 
    var groupSize = 2;
    
    if (window.innerWidth > 768) { // bootstrap md breakpoint
        groupSize = 3;
    }
    if (window.innerWidth > 992) { // bootstrap lg breakpoint
        groupSize = 4;
    }
    if (window.innerWidth > 1400) { // bootstrap xxl breakpoint
        groupSize = 5;
    }

    // anything specifically selecting for cstm needs to select for tmdb
    // generate new ids for the tmdb carousel. 

    const cstmCarousels = Array.from(document.querySelectorAll("#cstmCarousel > .carousel"));
    const tmdbCarousels = Array.from(document.querySelectorAll("#tmdbCarousel > .carousel"));
    const allCollections = Array.from(document.querySelectorAll(".collections > button"));
    const collections = [Array.from(document.querySelectorAll("#cstmCollections > button")), Array.from(document.querySelectorAll("#tmdbCollections > button"))];
    const dotSection = [document.getElementById("cstmIndicatorSect"), document.getElementById("tmdbIndicatorSect")];
    var space = document.querySelector(".card.clean").offsetWidth * groupSize; // number of px to move in either direction
    var prevBtn, nextBtn, numMovies, targetCaroId, visiCaroId = ["cstmCarousel0","tmdbCarousel0"], sectIndex, collPos = 0, curr = 0, carouselCount = [0,0];
    var carouselItems = [[],[]], dotArr = [], arrDotArr = [], dotGroups = [], groupList = [[],[]], selectedCarousel;
    
    for (let i = 0; i < allCollections.length; i++) {
        document.getElementById(allCollections[i].id).addEventListener("click", () => {
            collPos = allCollections[i].id.slice(-1);
            // identify collection that was clicked by position in array
            if (allCollections[i].id.slice(0, 4) == "tmdb") {
                targetCaroId = "tmdbCarousel" + collPos;
                sectIndex = 1;
            } 
            else {
                targetCaroId = "cstmCarousel" + collPos;
                sectIndex = 0;
            }

            // check if it is the current collection, if so, do nothing
            if (targetCaroId == visiCaroId[sectIndex]) return;
            // visually transition to target collection 
            transitionCollection(targetCaroId, visiCaroId[sectIndex])
            
            let x = i;
            if (i > collections[0].length - 1) x = i - collections[0].length;
            
            // set collection button to active 
            document.getElementById(collections[sectIndex][x].id).setAttribute("class", "active");

            collections[sectIndex].forEach(btn => {
                if (btn.id != collections[sectIndex][x].id) {
                    document.getElementById(btn.id).setAttribute("class", "inactive");
                }
            });
            // change active dot indicator
            document.getElementById(groupList[sectIndex][collPos]).setAttribute("class", "");
            document.getElementById(groupList[sectIndex][visiCaroId[sectIndex].substring(visiCaroId[sectIndex].length - 1)]).setAttribute("class", "hide");
            // after transition ends | hide then show
            selectedCarousel = (sectIndex == 0) ? cstmCarousels : tmdbCarousels;
            setTimeout(() => {
                selectedCarousel.forEach(carousel => {
                    if (carousel.id != targetCaroId) {
                        document.getElementById(carousel.id).setAttribute("class", "carousel hide");
                    }
                });
                document.getElementById(targetCaroId).setAttribute("class", "carousel");
            }, 500);
            setTimeout(() => { 
                document.getElementById(visiCaroId[sectIndex]).style.opacity = 1;
                document.getElementById(targetCaroId).style.opacity = 1;
                visiCaroId[sectIndex] = targetCaroId;
            },515);
        });
    }
    
    cstmCarousels.forEach(carousel => {
        carousel.id = "cstmCarousel"+carouselCount[0];
        carousel.dataset.target = 0; // position in px to translate
        carousel.dataset.position = carouselCount[0];
        carousel.dataset.loc = 0;
        let c1 = "cstm";

        carouselItems[0].push("#" + carousel.id + " .carousel-track .card.clean");
        // carouselCount tracks number of carousels and is the same as number of collections
        buildDotGroup(carouselCount[0], carouselItems[0][carouselCount[0]], c1);

        document.querySelector("#" + carousel.id + " .ctrl-prev").addEventListener("click", () => {
            // count number of movies in carousel
            let numMovies = document.querySelectorAll(carouselItems[0][carousel.dataset.position]).length;
            // select the correct dot array
            dotArr = getDotArr(carousel.id.substring(carousel.id.length-1), dotGroups);
            // calculate end position of carousel
            let endPos = calcEndPos(numMovies);
            let targetPos = ((parseInt(carousel.dataset.target) + space) > 0) ? 0 : parseInt(carousel.dataset.target) + space;

            (carousel.dataset.target >= 0) ? carousel.dataset.target = endPos : carousel.dataset.target = targetPos;
            
            document.querySelector("#"+c1+"DotGroup"+carousel.id.substring(carousel.id.length-1)+" > #"+dotArr[carousel.dataset.loc]).setAttribute("class", "material-symbols-outlined");
            if (carousel.dataset.loc == 0) carousel.dataset.loc = dotArr.length;
            document.querySelector("#"+c1+"DotGroup"+carousel.id.substring(carousel.id.length-1)+" > #"+dotArr[--carousel.dataset.loc]).setAttribute("class", "material-symbols-outlined orange600");
            document.querySelectorAll("#"+ carousel.id + " .carousel-track .card.clean").forEach(item => {
                item.style.transform = "translateX(" + carousel.dataset.target + "px)";
            });
        });
        document.querySelector("#" + carousel.id + " .ctrl-next").addEventListener("click", () => {
            // count number of movies in carousel
            let numMovies = document.querySelectorAll(carouselItems[0][carousel.dataset.position]).length;
            // select the correct dot array
            dotArr = getDotArr(carousel.id.substring(carousel.id.length-1), dotGroups);
            // calculate end position of carousel
            let endPos = calcEndPos(numMovies);
            let nextNum = numMovies - 2,
                nextSpace = space / groupSize * -1;
            
            (carousel.dataset.target <= endPos ) ? carousel.dataset.target = 0 : carousel.dataset.target -= space;
            
            document.querySelector("#"+c1+"DotGroup"+carousel.id.substring(carousel.id.length-1)+" > #"+dotArr[carousel.dataset.loc]).setAttribute("class", "material-symbols-outlined");
            if (carousel.dataset.loc == dotArr.length-1) carousel.dataset.loc = -1;
            document.querySelector("#"+c1+"DotGroup"+carousel.id.substring(carousel.id.length-1)+" > #"+dotArr[++carousel.dataset.loc]).setAttribute("class", "material-symbols-outlined orange600");
            document.querySelectorAll("#"+ carousel.id + " .carousel-track .card.clean").forEach(item => {
                item.style.transform = "translateX(" + carousel.dataset.target + "px)";
            });
        });
        carouselCount[0]++;
    });

    tmdbCarousels.forEach(carousel => {
        carousel.id = "tmdbCarousel"+carouselCount[1];
        carousel.dataset.target = 0; // position in px to translate
        carousel.dataset.position = carouselCount[1];
        carousel.dataset.loc = 0;
        let t1 = "tmdb";
        carouselItems[1].push("#" + carousel.id + " .carousel-track .card.clean");
        // carouselCount tracks number of carousels and is the same as number of collections
        buildDotGroup(carouselCount[1], carouselItems[1][carouselCount[1]], t1);

        document.querySelector("#" + carousel.id + " .ctrl-prev").addEventListener("click", () => {
            // count number of movies in carousel
            let numMovies = document.querySelectorAll(carouselItems[1][carousel.dataset.position]).length;
            // select the correct dot array
            //console.dir(dotGroups);
            let tmdbDotGroup = parseInt(carousel.id.substring(carousel.id.length - 1)) + collections[0].length;
            dotArr = getDotArr(tmdbDotGroup, dotGroups);
            // calculate end position of carousel
            let endPos = calcEndPos(numMovies);
            let targetPos = ((parseInt(carousel.dataset.target) + space) > 0) ? 0 : parseInt(carousel.dataset.target) + space;

            (carousel.dataset.target >= 0) ? carousel.dataset.target = endPos : carousel.dataset.target = targetPos;
            
            document.querySelector("#"+t1+"DotGroup"+carousel.id.substring(carousel.id.length-1)+" > #"+dotArr[carousel.dataset.loc]).setAttribute("class", "material-symbols-outlined");
            if (carousel.dataset.loc == 0) carousel.dataset.loc = dotArr.length;
            
            document.querySelector("#"+t1+"DotGroup"+carousel.id.substring(carousel.id.length-1)+" > #"+dotArr[--carousel.dataset.loc]).setAttribute("class", "material-symbols-outlined orange600");
            document.querySelectorAll("#"+ carousel.id + " .carousel-track .card.clean").forEach(item => {
                item.style.transform = "translateX(" + carousel.dataset.target + "px)";
            });
        });
        document.querySelector("#" + carousel.id + " .ctrl-next").addEventListener("click", () => {
            // count number of movies in carousel
            let numMovies = document.querySelectorAll(carouselItems[1][carousel.dataset.position]).length;
            // select the correct dot array
            let tmdbDotGroup = parseInt(carousel.id.substring(carousel.id.length - 1)) + collections[0].length;
            dotArr = getDotArr(tmdbDotGroup, dotGroups);
            // calculate end position of carousel
            let endPos = calcEndPos(numMovies);
            let nextNum = numMovies - 2,
                nextSpace = space / groupSize * -1;
            
            (carousel.dataset.target <= endPos ) ? carousel.dataset.target = 0 : carousel.dataset.target -= space;
            
            document.querySelector("#"+t1+"DotGroup"+carousel.id.substring(carousel.id.length-1)+" > #"+dotArr[carousel.dataset.loc]).setAttribute("class", "material-symbols-outlined");
            if (carousel.dataset.loc == dotArr.length-1) carousel.dataset.loc = -1;
            document.querySelector("#"+t1+"DotGroup"+carousel.id.substring(carousel.id.length-1)+" > #"+dotArr[++carousel.dataset.loc]).setAttribute("class", "material-symbols-outlined orange600");
            document.querySelectorAll("#"+ carousel.id + " .carousel-track .card.clean").forEach(item => {
                item.style.transform = "translateX(" + carousel.dataset.target + "px)";
            });
        });
        carouselCount[1]++;
    });
     /************************************************
      * section level, collection / carousel level, movie level
      * 
      ************************************************/

    //console.dir(carouselItems);
    // grab ids of individ dots
    for (let y = 0; y < dotSection.length; y++) { 
        for (let i = 0; i < groupList[y].length; i++) {
            dotArr = [];
            for (let x = 0; x < document.getElementById(groupList[y][i]).children.length; x++) {
                dotArr.push(dotSection[y].children[i].children[x].id);
            }
            dotGroups.push(dotArr);
        }
    }
    
    function transitionCollection(targetId, currentId) {
        //console.log(currentId);
        //console.log(targetId);

        document.getElementById(currentId).style.opacity = 0;
        document.getElementById(targetId).style.opacity = 0;
    }

    function calcEndPos(numberOfMovies) {
        return ((space / groupSize) * -1) * numberOfMovies + space;
    }

    function getDotArr(count, group) {
        dotArr = group[count];
        return dotArr;
    }
    // index is the current carousel/collection being looped over
    function buildDotGroup(index, carouselSelector, sectName) {
        const DotGroup = document.createElement("div");
        let sectNum = (sectName == "tmdb") ? 1 : 0;
        DotGroup.id = sectName + "DotGroup" + index;
        if (groupList[sectNum].length > 0) DotGroup.setAttribute("class", "hide");
        let numMovies = document.querySelectorAll(carouselSelector).length;
        createIndicators(groupSize, DotGroup, numMovies)
        groupList[sectNum].push(DotGroup.id);
        dotSection[sectNum].append(DotGroup);
    }

    function createIndicators(size, group, numMovies) {
        for (let i = 0; i < numMovies / size; i++) {
            const dotEle = document.createElement("span");
            dotEle.id = "dot" + i;
            dotEle.setAttribute("class", "material-symbols-outlined");
            if (i == 0) dotEle.classList.add("orange600");
            dotEle.textContent = "circle";
            group.append(dotEle);
        }
    }

    // setAttributes helper function
    function setAttributes(el, attrs) {
        for (var key in attrs) {
            el.setAttribute(key, attrs[key]);
        }
    }

</script>
}