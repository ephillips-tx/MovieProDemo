@using MovieProDemo.ViewModels
@using MovieProDemo.Services.Interfaces
@using MovieProDemo.Models.TMDB
@inject IImageService _imageService

@model LandingPageVM

@{
    ViewData["Title"] = "MoviePro";
    var btnClass = "btn btn-lg btn-warning fw-bold w-100";
    var colStyle = string.Empty;
    var count = 0;
    var collId = string.Empty;
    var tmdbCollId = string.Empty;
    var carouStyle = "carousel";
    
    List<MovieSearchResult[]> tmdbMovieCollections = new List<MovieSearchResult[]>() { Model.NowPlaying.results, Model.Popular.results, Model.TopRated.results, Model.Upcoming.results };
                                    
}

<div class="row">
    <div class="col-12">
        <h4 class="mb-3">CUSTOM COLLECTIONS</h4>
        <div class="row mb-4">
            <div class="col-12">
                <div class="collections">
                    @foreach (var collection in Model.CustomCollections)
                    {
                        collId = "coll" + count;
                        colStyle = (collection.Name == "All") ? "active" : "inactive";
                        <button class="@colStyle" id="@collId">#@collection.Name</button>
                        count++;
                    }
                    @{ count = 0; }
                    <div class="text-end mb-1" id="customIndicatorSect"></div>
                    <div class="carousel-container" id="cstmCarousel">
                        @foreach (var collection in Model.CustomCollections)
                        {
                            @if (count > 0)
                            {
                                carouStyle = "carousel hide";
                            }
                            <div class="@carouStyle">
                                <button class="carousel-control ctrl-prev"><span class="material-symbols-outlined">arrow_left</span></button>
                                <button class="carousel-control ctrl-next"><span class="material-symbols-outlined">arrow_right</span></button>
                                <div class="carousel-track d-flex flex-nowrap">
                                    @foreach(var movie in collection.MovieCollections)
                                    {
                                        <div class="card clean">
                                            <img src="@_imageService.DecodeImage(movie.Movie.Poster, movie.Movie.PosterType)" class="card-img-top img-fluid" alt="Movie Poster">
                                            <div class="card-body">
                                                <h5 class="card-title clampTitle">@movie.Movie.Title</h5>
                                                <p class="card-text clampOverview">@movie.Movie.Overview</p>
                                                <a asp-action="Details" asp-controller="Movies" asp-route-id="@movie.Movie.MovieId" class="">More Info</a>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            count++; 
                        }
                     </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-12">
        <h4 class="mb-3">TMDB Movies</h4>
        <div class="row mb-4">
            <div class="col-12">
                <div class="collections">
                    @{
                        string[] tmdbCollections = new string[] { "NOW PLAYING", "POPULAR", "TOP RATED", "UPCOMING" };
                        count = 0;
                    }
                    @foreach (var collection in tmdbCollections)
                    {
                        tmdbCollId = "tmdbColl" + count;
                        colStyle = (tmdbCollections[count] == tmdbCollections[0]) ? "active" : "inactive";
                        <button class="@colStyle" id="@tmdbCollId">#@tmdbCollections[count]</button>
                        count++;
                    }
                    @{ int index = 0; }
                    <div class="text-end mb-1" id="tmdbIndicatorSect"></div>
                    <div class="carousel-container" id="tmdbCarousel">
                        @foreach (var collection in tmdbMovieCollections)
                        {
                            @if (index > 0)
                            {
                                carouStyle = "carousel hide";
                            }
                            <div class="@carouStyle">
                                <button class="carousel-control ctrl-prev"><span class="material-symbols-outlined">arrow_left</span></button>
                                <button class="carousel-control ctrl-next"><span class="material-symbols-outlined">arrow_right</span></button>
                                <div class="carousel-track d-flex flex-nowrap">
                                    @{
                                        int movieCount = ViewBag.MovieCount;
                                        var tmdbMovie = tmdbMovieCollections[index];
                                    }
                                    @foreach(var movie in tmdbMovie)
                                    {
                                        <div class="card clean">
                                            <img src="@movie.poster_path" class="card-img-top img-fluid" alt="Movie Poster">
                                            <div class="card-body">
                                                <h5 class="card-title clampTitle">@movie.title</h5>
                                                <p class="card-text clampOverview">@movie.overview</p>
                                                <a asp-action="Details" asp-controller="Movies" asp-route-id="@movie.id" class="">More Info</a>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                            index++; 
                        }
                     </div>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
<script>
    // groupSize is basically how many movie posters to fully display. 
    var groupSize = 2;
    
    if (window.innerWidth > 768) { // bootstrap md breakpoint
        groupSize = 3;
    }
    if (window.innerWidth > 992) { // bootstrap lg breakpoint
        groupSize = 4;
    }
    if (window.innerWidth > 1400) { // bootstrap xxl breakpoint
        groupSize = 5;
    }

    const cstmCarousels = Array.from(document.querySelectorAll("#cstmCarousel > .carousel"));
    const tmdbCarousels = Array.from(document.querySelectorAll("#tmdbCarousel > .carousel"));
    const collections = Array.from(document.querySelectorAll(".collections > button"));
    const dotSection = document.getElementById("customIndicatorSect");
    var space = document.querySelector(".card.clean").offsetWidth * groupSize; // number of px to move in either direction
    var prevBtn, nextBtn, numMovies, targetCaroId, visiCaroId = "carousel0", collPos = 0, curr = 0, carouselCount = 0, carouselItems = [], dotArr = [], dotGroups = [], groupList = [];
    
    for (let i = 0; i < collections.length; i++) {
        document.getElementById(collections[i].id).addEventListener("click", () => {
            collPos = collections[i].id.substring(collections[i].id.length-1);
            targetCaroId = "carousel" + collPos;
            // select first element with a class of carousel & transition opacity to 0
            document.getElementById(visiCaroId).style.opacity = 0;
            document.getElementById(targetCaroId).style.opacity = 0;
            document.getElementById(collections[i].id).setAttribute("class", "active");
            collections.forEach(btn => {
                if (btn.id != collections[i].id) {
                    document.getElementById(btn.id).setAttribute("class", "inactive");
                }
            });
            
            document.getElementById(groupList[collPos]).setAttribute("class", "");
            document.getElementById(groupList[visiCaroId.substring(visiCaroId.length - 1)]).setAttribute("class", "hide");
            // after transition ends | hide then show
            setTimeout(() => {
                cstmCarousels.forEach(carousel => {
                    if (carousel.id != targetCaroId) {
                        document.getElementById(carousel.id).setAttribute("class", "carousel hide");
                    }
                });
                document.getElementById(targetCaroId).setAttribute("class", "carousel");
            }, 500);
            setTimeout(() => { 
                document.getElementById(visiCaroId).style.opacity = 1;
                document.getElementById(targetCaroId).style.opacity = 1;
                visiCaroId = targetCaroId;
            },515);
        });
    }
    
    cstmCarousels.forEach(carousel => {
        carousel.id = "carousel"+carouselCount;
        carousel.dataset.target = 0; // position in px to translate
        carousel.dataset.position = carouselCount;
        carouselItems.push("#" + carousel.id + " .carousel-track .card.clean");
        
        buildDotGroup(carouselCount, carouselItems[carouselCount]);

        document.querySelector("#" + carousel.id + " .ctrl-prev").addEventListener("click", () => {
            // count number of movies in carousel
            let numMovies = document.querySelectorAll(carouselItems[carousel.dataset.position]).length;
            // select the correct dot array
            dotArr = getDotArr(carousel.id.substring(carousel.id.length-1), dotGroups);
            // calculate end position of carousel
            let endPos = calcEndPos(numMovies);
            let targetPos = ((parseInt(carousel.dataset.target) + space) > 0) ? 0 : parseInt(carousel.dataset.target) + space;

            (carousel.dataset.target >= 0) ? carousel.dataset.target = endPos : carousel.dataset.target = targetPos;
            
            document.querySelector("#dotGroup"+carousel.id.substring(carousel.id.length-1)+" > #"+dotArr[curr]).setAttribute("class", "material-symbols-outlined");
            if (curr == 0) curr = dotArr.length;
            document.querySelector("#dotGroup"+carousel.id.substring(carousel.id.length-1)+" > #"+dotArr[--curr]).setAttribute("class", "material-symbols-outlined orange600");
            document.querySelectorAll("#"+ carousel.id + " .carousel-track .card.clean").forEach(item => {
                item.style.transform = "translateX(" + carousel.dataset.target + "px)";
            });
        });
        document.querySelector("#" + carousel.id + " .ctrl-next").addEventListener("click", () => {
            // count number of movies in carousel
            let numMovies = document.querySelectorAll(carouselItems[carousel.dataset.position]).length;
            // select the correct dot array
            dotArr = getDotArr(carousel.id.substring(carousel.id.length-1), dotGroups);
            // calculate end position of carousel
            let endPos = calcEndPos(numMovies);
            let nextNum = numMovies - 2,
                nextSpace = space / groupSize * -1;
            
            (carousel.dataset.target <= endPos ) ? carousel.dataset.target = 0 : carousel.dataset.target -= space;

            document.querySelector("#dotGroup"+carousel.id.substring(carousel.id.length-1)+" > #"+dotArr[curr]).setAttribute("class", "material-symbols-outlined");
            if (curr == dotArr.length-1) curr = -1;
            document.querySelector("#dotGroup"+carousel.id.substring(carousel.id.length-1)+" > #"+dotArr[++curr]).setAttribute("class", "material-symbols-outlined orange600");
            document.querySelectorAll("#"+ carousel.id + " .carousel-track .card.clean").forEach(item => {
                item.style.transform = "translateX(" + carousel.dataset.target + "px)";
            });
        });
        carouselCount++;
    });

    //grab ids of individ dots
    for (let i = 0; i < groupList.length; i++) {
        dotArr = [];
        for (let x = 0; x < document.getElementById(groupList[i]).children.length; x++) {
            dotArr.push(dotSection.children[i].children[x].id);
        }
        dotGroups.push(dotArr);
    }
    
    function calcEndPos(numberOfMovies) {
        return ((space / groupSize) * -1) * numberOfMovies + space;
    }

    function getDotArr(count, group) {
        dotArr = group[count];
        return dotArr;
    }

    function buildDotGroup(index, carouselSelector) {
        const dotGroup = document.createElement("div");
        dotGroup.id = "dotGroup" + index;
        if (groupList.length > 0) dotGroup.setAttribute("class", "hide");
        let numMovies = document.querySelectorAll(carouselSelector).length;
        createIndicators(groupSize, dotGroup, numMovies)
        groupList.push(dotGroup.id);
        dotSection.append(dotGroup);
    }

    function createIndicators(size, group, numMovies) {
        for (let i = 0; i < numMovies / size; i++) {
            const dotEle = document.createElement("span");
            dotEle.id = "dot" + i;
            dotEle.setAttribute("class", "material-symbols-outlined");
            if (i == 0) dotEle.classList.add("orange600");
            dotEle.textContent = "circle";
            group.append(dotEle);
        }
    }

    // setAttributes helper function
    function setAttributes(el, attrs) {
        for (var key in attrs) {
            el.setAttribute(key, attrs[key]);
        }
    }

</script>
}