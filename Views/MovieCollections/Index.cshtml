@using MovieProDemo.Models.Database


@model Collection

<div class="row">
    <div class="col-md-10 text-center mx-auto bg-white">
        <h2 class="text-dark my-3">MANAGE COLLECTIONS</h2>
        <form asp-action="Index">
            <div class="row">
                <div class="col-10">
                    <select class="form-control" asp-items="@ViewBag.CollectionId" id="collectionList"></select>
                </div>
                <div class="col-2">
                    <button type="button" class="btn btn-dark w-100" data-bs-toggle="modal" data-bs-target="#addCollectionModal">ADD</button>
                </div>
                <div class="col-12">
                    <hr class="text-dark" />
                </div>
            </div>
            <div class="row gx-4">
                <div class="col-5">
                    <h6 class="text-dark fw-bold">IN COLLECTION</h6>
                    <select class="form-select w-100" size="8" id="inCollection" multiple>
                        @foreach(var movie in ViewBag.IdsInCollection)
                        {
                            <option class="fw-bold">@movie.Text</option>
                        }
                    </select>
                    <div class="my-1">
                        <button type="button" class="btn btn-sm btn-outline-warning btnArrow w-25" id="orderUp"><span class="material-symbols-outlined">keyboard_arrow_up</span></button>
                        <button type="button" class="btn btn-sm btn-outline-warning btnArrow w-25" id="orderDown"><span class="material-symbols-outlined">keyboard_arrow_down</span></button>
                    </div>
                </div>
                <div class="col-2 d-flex align-items-center justify-content-center p-0">
                    <div class="flex-column">
                        @{ var classString = "btn btn-sm btn-outline-warning mb-1 btnArrow"; }
                        <button type="button" class="@classString" id="add"><span class="material-symbols-outlined">keyboard_arrow_left</span></button>
                        <button type="button" class="@classString" id="remove"><span class="material-symbols-outlined">keyboard_arrow_right</span></button>
                    </div>
                </div>
                <div class="col-5">
                    <h6 class="text-dark fw-bold">NOT IN COLLECTION</h6>
                    <select class="form-select w-100" size="8" id="notInCollection" multiple>
                        @foreach(var movie in ViewBag.IdsNotInCollection)
                        {
                            <option class="fw-bold">@movie.Text</option>
                        }
                    </select>
                </div>
                <div class="col-12 mb-3">
                    <hr class="text-dark" />
                    <button type="submit" class="btn btn-dark w-100">SUBMIT</button>
                </div>
            </div>
        </form>
    </div>
</div>

<div class="bg-light">
    <div id="testDiv"></div>
</div>

@* MODAL *@
<div class="modal fade" id="addCollectionModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Movie Collection</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form asp-action="Create" asp-controller="Collections"> 
                    <div class="form-group mb-3">
                        <label asp-for="Name" class="control-label">Name:</label>
                        <input asp-for="Name" class="form-control" autocomplete="off" />
                    </div>
                    <div class="form-group mb-3">
                        <label asp-for="Description" class="control-label">Description:</label>
                        <textarea asp-for="Description" class="form-control" rows="3"></textarea>
                    </div>
                    <button type="submit" class="btn btn-outline-warning">CREATE</button>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-danger" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // OPTION class to deal with events 
        class cOption {
            constructor(el) {
                (el == null) ? this.el = document.createElement('option') : this.el = el;
                this.clickHandler = this.toggleSelected.bind(this, this.el);
                this.addEvents();
            }
            
            addEvents() {
                this.el.addEventListener('click', this.clickHandler);
                //this.el.addEventListener("click", () => { console.log("clicked") });
            }

            removeEvents() {
                this.el.removeEventListener('click', this.clickHandler);
            }

            toggleSelected(obj) {
                console.log("click handler fired");
                if (obj.getAttribute("selected")) {
                    obj.removeAttribute("selected"); 
                    obj.setAttribute("class","fw-bold");
                    return;
                }
                obj.setAttribute("selected", true); 
                obj.setAttribute("class", "fw-bold fst-italic text-danger asterisk");
            }
        }

        // Redirect after collection is changed
        let collectionList = document.getElementById("collectionList");
        collectionList.addEventListener("change", ()=>{
            let url = window.location.href.split("?");
            window.location.href = url[0]+"?Id="+collectionList.value;
        });

        let singleRemove = document.getElementById("remove");
        let singleAdd = document.getElementById("add");
        let inColl = document.getElementById("inCollection");
        let notInColl = document.getElementById("notInCollection");

        // add event handlers to options
        addListener(inColl);
        addListener(notInColl);

        // Add/Remove Movies from collection
        // pass "add" to add to collection OR "remove" to remove it from collection
        singleAdd.addEventListener("click", ()=>{
            swap("add");
        });

        singleRemove.addEventListener("click", ()=>{
            swap("remove");
        });

        function swap(action) {
            var collection, selected;

            (action == "add") ? collection = notInColl : collection = inColl;

            selected = Array.from(collection);
            selected = selected.filter(option => option.hasAttribute("selected"));

            makeOptions(collection, selected);
            // recast IDs after change
            castId(document.getElementById("inCollection"));
            castId(document.getElementById("notInCollection"));
        }

        function makeOptions(list, arr) {
            let newOption, toRemove = [], 
                addOption = [document.getElementById("inCollection"), document.getElementById("notInCollection")],
                removeOption = [document.getElementById("notInCollection"), document.getElementById("inCollection")];

            // addOption means we are adding options to collection | removeOption means we are removing from collection
            (list.getAttribute("id") == "notInCollection") ? list = addOption : list = removeOption;

            // count options in opposite list
            let count = list[0].length;

            for (let i = 0; i < arr.length; i++) {
                // instantiate an object from cOption class
                newOption = new cOption;
                newOption.el.id = list[0].id+(i+count);
                newOption.el.setAttribute("class","fw-bold");
                newOption.el.textContent = arr[i].textContent;
                // log id of option
                toRemove.push(arr[i].id);
                // append new option
                list[0].appendChild(newOption.el);
            }
            
            for (let i = 0; i < toRemove.length; i++) {
                // remove from opposite list
                document.getElementById(toRemove[i]).remove();
            }
        }

        function addListener(list) {
            let newOption;
            if (list.options.length == 0) return;
            
            for (let i = 0; i < list.options.length; i++) {
                newOption = new cOption(list.options[i]);
                newOption.el.id = list.id+i;
            }
        }

        function castId(list) {
            if (list == null) return;

            for (let i = 0; i < list.length; i++) {
                list.options[i].id = list.id+i;
            }
        }
    </script>
}